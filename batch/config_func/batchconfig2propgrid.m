% batchconfig2propgrid() - Translate the batch_config structure into a class 
% def object for PropertyGrid GUI editing.
%
%
% Usage:
%  >> properties = batchconfig2propgrid(batchconfig, scheduler);
%
% Graphical Interface:
%
% Required Inputs:
%   batch_config      - batch_configuration structure created from
%                       pop_batch_edit.
%   scheduler         - string to use as a hint to find the scheduler
%                       documentation for options
%
% Optional Inputs:
%
% Outputs:
%    properties    = properties of class def object to be displayed in
%    PropertyGrid GUIs
%
% Notes: The batch_config structure is only translated into an object at
% the time of being displayed in the PropertyGrid GUI. Once that the GUI is
% closed it is translated back to a structure and is only handled as a
% structure by other functions and the workspace.
%
% See also: pop_runhtb(), pop_batch_edit()

% Copyright (C) 2017 Brock University Cognitive and Affective Neuroscience Lab
%
% Code written by James A. Desjardins, Allan Campopiano, Andrew Lofts,
%                 Michael Cichonski, and Brad Kennedy
%
% This program is free software; you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation; either version 2 of the License, or
% (at your option) any later version.
%
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
%
% You should have received a copy of the GNU General Public License
% along with this program (LICENSE.txt file in the root directory); if not, 
% write to the Free Software Foundation, Inc., 59 Temple Place,
% Suite 330, Boston, MA  02111-1307  USA

function properties = batchconfig2propgrid(batchconfig)
num_properties = 17;
for i=1:length(batchconfig) % 1 based indexing is awful
    properties(((i-1)*num_properties+1):(i*num_properties)) = [ ...
... % basic properties...
        PropertyGridField(['exec_func[',num2str(i),']'], batchconfig(i).exec_func, ...
        'Type', PropertyType('char', 'row', get_valid_exec_func()), ...
        'Category', [' ', batchconfig(i).file_name], ...
        'DisplayName', ['exec_func[',num2str(i),']'], ...
        'Description', 'Name of the function that will execute the htb files.') ...
        PropertyGridField(['replace_string[',num2str(i),']'], batchconfig(i).replace_string, ...
        'Type', PropertyType('cellstr', 'column'), ...
        'Category', [' ', batchconfig(i).file_name], ...
        'DisplayName', ['replace_string[',num2str(i),']'], ...
        'Description', ['The cell array of strings to swap into the History Template script files.']) ...
        PropertyGridField(['order[',num2str(i),']'], batchconfig(i).order, ...
        'Type', PropertyType('denserealdouble','matrix'), ...
        'Category', [' ', batchconfig(i).file_name], ...
        'DisplayName', ['order[',num2str(i),']'], ...
        'Description', 'values representing the sequence order.') ...
... % execute head...
        PropertyGridField(['qsub[',num2str(i),']'], [], ...
        'Category', [' ', batchconfig(i).file_name], ...
        'DisplayName', ['exec_config[',num2str(i),']']) ...
...% execute properties...
        PropertyGridField(['qsub[',num2str(i),'].session_init'], batchconfig(i).session_init, ...
        'Type', PropertyType('char', 'row'), ...
        'Category', [' ', batchconfig(i).file_name], ...
        'DisplayName', 'session_init', ...
        'Description', 'Code [or file name of a text file containing code] to execute at the begining of a submission session.') ...
        PropertyGridField(['qsub[',num2str(i),'].job_name'], batchconfig(i).job_name, ...
        'Type', PropertyType('char','row'), ...
        'Category', [' ', batchconfig(i).file_name], ...
        'DisplayName', 'job_name', ...
        'Description', 'Parameters for creating the job name (Batch string swap rules apply).') ...
        PropertyGridField(['qsub[',num2str(i),'].job_init'], batchconfig(i).job_init, ...
        'Type', PropertyType('char', 'row'), ...
        'Category', [' ', batchconfig(i).file_name], ...
        'DisplayName', 'job_init', ...
        'Description', 'Code [or file name of a text file containing code] to execute at the begining of a job.') ...
        PropertyGridField(['qsub[',num2str(i),'].mfile_name'], batchconfig(i).mfile_name, ...
        'Type', PropertyType('char','row'), ...
        'Category', [' ', batchconfig(i).file_name], ...
        'DisplayName', 'mfile_name', ...
        'Description', 'Parameters for creating the .m file name (Batch string swap rules apply).') ...
        PropertyGridField(['qsub[',num2str(i),'].m_init'], batchconfig(i).m_init, ...
        'Type', PropertyType('char', 'row'), ...
        'Category', [' ', batchconfig(i).file_name], ...
        'DisplayName', 'm_init', ...
        'Description', 'Code [or file name of a text file containing code] to execute at the begining of the m file.') ...
        PropertyGridField(['qsub[',num2str(i),'].submit_options'], batchconfig(i).submit_options, ...
        'Type', PropertyType('cellstr', 'column'), ...
        'Category', [' ', batchconfig(i).file_name], ...
        'DisplayName', 'submit_options', ...
        'Description', get_scheduler_options(batchconfig(i).exec_func)) ...
        PropertyGridField(['qsub[',num2str(i),'].memory'], batchconfig(i).memory, ...
        'Type', PropertyType('char', 'row'), ...
        'Category', [' ', batchconfig(i).file_name], ...
        'DisplayName', 'memory', ...
        'Description', 'Amount of memory required by each process.') ...
        PropertyGridField(['qsub[',num2str(i),'].time_limit'], batchconfig(i).time_limit, ...
        'Type', PropertyType('char', 'row'), ...
        'Category', [' ', batchconfig(i).file_name], ...
        'DisplayName', 'time_limit', ...
        'Description', 'Provide a runtime limit. (elapsed, wallclock time, not summed across cpus)') ...
        PropertyGridField(['qsub[',num2str(i),'].mpi'], batchconfig(i).mpi, ...
        'Type', PropertyType('char', 'row', {'true','false'}), ...
        'Category', [' ', batchconfig(i).file_name], ...
        'DisplayName', 'mpi', ...
        'Description', 'Whether mpi will be used or not. (default: false)') ...
        PropertyGridField(['qsub[',num2str(i),'].num_tasks'], batchconfig(i).num_tasks, ...
        'Type', PropertyType('char', 'row'), ...
        'Category', [' ', batchconfig(i).file_name], ...
        'DisplayName', 'num_tasks', ...
        'Description', 'Number of processes to be used for this job. (default: 1)') ...
        PropertyGridField(['qsub[',num2str(i),'].threads_per_task'], batchconfig(i).threads_per_task, ...
        'Type', PropertyType('char', 'row'), ...
        'Category', ['Level ',num2str(i),' - ',batchconfig(i).file_name], ...
        'DisplayName', 'threads_per_task', ...
        'Description', 'Number of threads to be used per process for this job. (default: 1)') ...
        PropertyGridField(['qsub[',num2str(i),'].software'], batchconfig(i).software, ...
        'Type', PropertyType('char', 'row', {'matlab','octave','none'}), ...
        'Category', [' ', batchconfig(i).file_name], ...
        'DisplayName', 'software', ...
        'Description', ['Name of the software to used in executing the code from History file number', num2str(i)]) ...
        PropertyGridField(['qsub[',num2str(i),'].program_options'], batchconfig(i).program_options, ...
        'Type', PropertyType('cellstr', 'column'), ...
        'Category', [' ', batchconfig(i).file_name], ...
        'DisplayName', 'program_options', ...
        'Description', 'Options ???.') ...
    ];

end

end

function outstr = get_scheduler_options(scheduler)
    % Get this directory
    mname = which(mfilename());
    [path, ~, ~] = fileparts(mname);
    fname = [path '/' scheduler '_options.txt'];
    fid = fopen(fname);
    if fid == -1
        outstr = sprintf( ...
            ['qsub options depends on the scheduler used, we looked in '...
            '%s for this file but were unable to open it, populate this'...
            ' file to have it show here'], fname);
        return
    end
    outstr = fread(fid, '*char')';
    fclose(fid);
end


