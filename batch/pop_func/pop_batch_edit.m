% pop_batch_edit() - A GUI for creating new, loading old, editing and
% saving batch_config structures. There is a two step load function that
% allows the user to select multiple files from a browser then arrange the
% order within an edit field. 
%
% Usage:
%  >> pop_batch_edit
%
% Graphical Interface: Accessed from EEGLAB menue File > Batch > Batch
%                      configuration
%
%   Get batch config file names: opens file browser to select *.cfg file(s).
%   then populates the edit field with the file name list where the order
%   of the files can be manipulated prior to opening them into the
%   workspace.
%
%   Clear/Load: Clear the current batch_config structure from the
%   PropertyGrid field and load the batch_config structure(s) from the file
%   list edit field.
%
%   Save as: save a specific batch_config structure to a *.cfg file. If
%   multiple batch_config structures are present in the PropertyGrid field
%   a GUI will appear to specify which structure is to be saved.
%
%   Clear/New: Clear the current batch_config structure from the
%   PropertyGrig field and create a new empty batch_config structure.
%
%   Cancel: Ignore changes and close the GUI.
%
%   OK: Apply the current state of all PropertyGrid fields to the
%   batch_config structure in the base workspace then close the GUI.
%
% Required Inputs: Defaults to loading the context_config structure from
%                  the base workspace if present.
%
% Optional Inputs:
%
% Outputs: Stores batch_config structure in the base workspace.
%
% Notes: As with all PropertyGrid GUIs any edited field must be terminated
% (e.g. click on another field or Enter) before the the inputs will be registered.
% If a field is modified without a termination the edit will be ignored
% when OK is clicked.
%
% See also: pop_runhtb()

% Copyright (C) 2017 Brock University Cognitive and Affective Neuroscience Lab
%
% Code written by James A. Desjardins, Allan Campopiano, and Andrew Lofts
%
% This program is free software; you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation; either version 2 of the License, or
% (at your option) any later version.
%
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
%
% You should have received a copy of the GNU General Public License
% along with this program (LICENSE.txt file in the root directory); if not, 
% write to the Free Software Foundation, Inc., 59 Temple Place,
% Suite 330, Boston, MA  02111-1307  USA

function batch_config = pop_batch_edit

com = ''; % this initialization ensure that the function will return something
% if the user press the cancel button

try parameters = evalin('base', 'batch_config');
    batch_config=parameters;
    
catch %if nonexistent in workspace
    batch_config=init_batch_config;
end

% pop up window
% -------------
if nargin < 4
    
    results=inputgui( ...
        'geom', ...
        {...
        {6 20 [0 0] [1 1]} ... %1 this is just to control the size of the GUI
        {6 20 [0.05 0] [2 1]} ... %2
        {6 20 [0.05 1] [2 1]} ... %2
        {6 20 [0.05 2] [2 12]} ... %2
        {6 20 [0.05 14] [2 1]} ... %4
        {6 20 [0.05 15] [2 1]} ... %5
        {6 20 [0.05 16] [2 1]} ... %5
        }, ...
        'uilist', ...
        {...
        {'Style', 'text', 'tag','txt_bcfp','string',blanks(20)} ... %1 this is just to control the size of the GUI
        {'Style', 'pushbutton', 'string', 'get Batch config file names', ...
        'callback', ...
        ['path = ''*.cfg'';' ...
        'if exist(''context_config'', ''var''); path = [find_hints_context_config(context_config, ''config_dir'') path]; end;' ...
        '[bcfgFName, bcfgFPath] = uigetfile(''*.cfg'',''Select batch configuration file:'',path,''multiselect'',''on'');', ...
        'if isnumeric(bcfgFName);return;end;', ...
        'set(findobj(gcbf,''tag'',''edt_bcp''),''string'',bcfgFPath);', ...
        'set(findobj(gcbf,''tag'',''edt_bcn''),''string'',bcfgFName);']} ... %2
        {'Style', 'edit', 'tag','edt_bcp'} ... %4
        {'Style', 'edit', 'max', 500, 'tag', 'edt_bcn'}, ... %6
        {'Style', 'pushbutton','string','Clear/Load', ...
        'callback', ...
        ['fname=get(findobj(gcbf,''tag'',''edt_bcn''),''string'');',...
         'if strcmp(fname,''''); return; end;', ...
         'if ~iscell(fname);fname={fname};end;', ...
         'fpath=get(findobj(gcbf,''tag'',''edt_bcp''),''string'');',...
         'batch_config = [];' ... 
         'for i=1:length(fname);', ...
         '    if isempty(batch_config);', ...
         '        batch_config=text2struct_bc(fullfile(fpath,fname{i}));', ...
         '        if ~strcmp(batch_config.file_name,fname{i});', ...
         '            disp(''changing file_name property...'');', ...
         '            batch_config.file_name=fname{i};', ...
         '        end;', ...
         '    else;', ...
         '        tmp.batch_config=text2struct_bc(fullfile(fpath,fname{i}));', ...
         '        if ~strcmp(tmp.batch_config.file_name,fname{i});', ...
         '            disp(''changing file_name property...'');', ...
         '            tmp.batch_config.file_name=fname{i};', ...
         '        end;', ...
         '        batch_config=[batch_config,tmp.batch_config];', ...
         '    end;', ...
         'end;', ...
         'global bcp;' ...
         'properties=batchconfig2propgrid(batch_config);' ...
         'properties = properties.GetHierarchy();' ...
         'bcp = PropertyGrid(gcf,' ...
         '''Properties'', properties,' ...
         '''Position'', [.36 .1 .6 .84]);'   ...
         ]}, ...
        {'Style', 'pushbutton','string','Save as', ...
        'callback', ...
        ['global bcp; batch_config = evalin(''caller'', ''batch_config'');' ...
        'batch_config=propgrid2batchconfig(bcp,batch_config);', ...
        'for i=1:length(batch_config);', ...
        '    level_cell{i}=bcp.Properties(i*4).Category;', ...
        'end;', ...
        'if length(level_cell)>1;', ...
        '    level_ind=pop_chansel(level_cell);', ...
        '    if isempty(level_ind);return;end;', ...
        'else;', ...
        '    level_ind=1;', ...
        'end;',...
        'for i=1:length(level_ind);', ...
        '   [cfgfname,cfgfpath]=uiputfile(''*.cfg'',''Batch configuration file'');', ...
        '   if cfgfname==0; return; end;', ...
        '   global bcp; batch_config = evalin(''caller'', ''batch_config'');' ...  
        '   batch_config=propgrid2batchconfig(bcp,batch_config);', ...
        '   tmp_batch_config=batch_config;batch_config=tmp_batch_config(i);', ...
        '   if ~strcmp(batch_config.file_name,cfgfname);', ...
        '      disp(''updating the file_name property...'');', ...
        '      batch_config.file_name=cfgfname;', ...
        '   end;', ...
        '   struct2text(batch_config,fullfile(cfgfpath,cfgfname));', ...
        '   batch_config=tmp_batch_config;', ...
        'end;']}, ...
        {'Style', 'pushbutton','string','Clear/New', ...
        'callback', ...
        ['if ~exist(''batch_config'',''var''); batch_config = []; end;', ...
        'batch_config = evalin(''base'', ''batch_config'');' ... 
        'batch_config=init_batch_config;', ...
        'global bcp;' ...
        'properties=batchconfig2propgrid(batch_config);' ...
        'properties = properties.GetHierarchy();' ...
        'bcp = PropertyGrid(gcf,' ...
        '''Properties'', properties,' ...
        '''Position'', [.36 .1 .6 .84]);']}, ...
        }, ...
        'title', 'Batch configuration -- pop_batch_edit()',...
        'eval',['batch_config = evalin(''caller'', ''batch_config'');' ... 
        'if ~isempty(batch_config);', ...
        'global bcp;' ...
        'properties=batchconfig2propgrid(batch_config);' ...
        'properties = properties.GetHierarchy();' ...
        'bcp = PropertyGrid(gcf,' ...
        '''Properties'', properties,' ...
        '''Position'', [.36 .1 .6 .84]);end;'] ...
        );
    
    if isempty(results);return;end
    
    % bring back the last base instance of batch_config
    batch_config = evalin('base', 'batch_config');
    
    % bring back the recent GUI activity
    global bcp;
    
    % pass recent GUI changes to batch_config struct
    batch_config=propgrid2batchconfig(bcp,batch_config);
    assignin('base', 'batch_config',batch_config);
    clear -global bcp
  
end;
